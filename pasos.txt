
# Comandos Rapidos:
1.1 comando -> python -m venv venv
1.2 comando -> source venv/Scripts/activate
1.3 comando -> pip install -r requirements.txt  ( para guardar las librerias Instalas de Python)

2. comando -> python manage.py runserver
3. comando -> python manage.py makemigrations
4. comando -> python manage.py migrate
5. comando -> python manage.py createsuperuser
6. comando -> python manage.py startapp xxxxx

#---------------------------------------------------------------
CREANDO PROYECTO DJANGO:
#---------------------------------------------------------------

_ Paso 1: creando entorno Virtual:

comando-crear    -> python -m venv venv
comando-activar  -> menv/Scripts/activate
comando-activar  -> source venv/Scripts/activate
comando-desactivar  -> deactivate

#---------------------------------------------------------------
            Django, INSTALANDO LAS DEPENDENCIAS
. Si estas bajando de git pasate a paso 3 a caso 2.
#---------------------------------------------------------------

_ Paso 2: Instalar django y Estar activado el ENTORNO VIRTUAL SIEMPRE:

. comando -> pip install Django

. comando para ver las librerias -> pip freeze

_ Paso 2.1: Para usar (Django REST Framework) instalar:
. Comando -> [pip install djangorestframework]

#---------------------------------------------------------------
_ Paso 3 -> Para  guardar las librerias Instalas de Python:
_ Mejor hacer al ""ultimo"" para guardar la lista de ependencias instaladas 
en tu entorno virtual de Django. 
#---------------------------------------------------------------


# comando caso 1 -> [pip freeze > requirements.txt]
Crea un archivo de requisitos con los paquetes actualmente instalados.

# comando caso 2-> [pip install -r requirements.txt]
Instala paquetes desde un archivo de las dependecias existente del proyecto,
en caso existe el archivo requirements.txt.

_ 3.1 -> para ver en consola las dependecias instaladas:
. comando -> [nano requirements.txt]


#---------------------------------------------------------------
     . Creando una Proyecto Principal y sus APLICACION:
#---------------------------------------------------------------

. Paso 4:

# Creando un proyecto -> core:
===> (core) es la principal de TODAS:
. comando -> django-admin startproject core

    DJANGO-REST/
    |-- inmuebles/
    |   |-- inmuebles/
    |   |   |-- __init__.py
    |   |   |-- admin.py
    |   |   |-- apps.py
    |   |   |-- models.py
    |   |   |-- serializers.py
    |   |   |-- tests.py
    |   |   |-- views.py
    |   |-- manage.py
    |-- menv/

. Paso 5:

# comando para crear una app adentro del Proyecto
commando -> [[python manage.py startapp products]]
_ movies
_ reviews
_ products
_ etc...

# AVISO -> AL CREAR UNA NUEVA APLICACION:
-> 1. dentro de cada apliacion [urls.py]
-> 2. dentro de cada apliacion [serializer.py]

#---------------------------------------------------------------
      		A hora levantar la aplicación
#---------------------------------------------------------------


_ Paso 6: 
. Comando -> [python manage.py runserver]

_ va a salir un error en rojo que son las migraciones, commando para arreglar y 
las migraciones Tambien va a crear la base de datos que viene por defecto q es SQLite:
_ Paso 6.1:
. commando - [python manage.py makemigrations]
. commando - [python manage.py migrate]



_ Paso 7: para crear superUser:

. comando -> [python manage.py createsuperuser]
. Username: williams392
. email: v_s392@gmail.com
. Password: l_45


#---------------------------------------------------------------
      		    Para documentar Django con drf-yasg
#---------------------------------------------------------------
herramienta que automatiza la generación de documentación de API en formato 
Swagger/OpenAPI 2.0 a partir de tu código de Django REST Framework

https://pypi.org/search/?q=drf-yasg

_ Instalar drf-yasg
. comando -> [pip install drf-yasg]

_ guia:
https://drf-yasg.readthedocs.io/en/stable/readme.html#installation

#---------------------------------------------------------------






#---------------------------------------------------------------
#---------------------------------------------------------------
      		    TEST DE DJANGO con pytest-django:
#---------------------------------------------------------------
#---------------------------------------------------------------


# LINK: https://pytest-django.readthedocs.io/en/latest/
. Ejecutar el conjunto de pruebas con pytest ofrece algunas características
que no están presentes en el mecanismo de prueba estándar de Django: Menos 
código repetitivo: no es necesario importar unittest, crear una subclase con
métodos. Simplemente escribir pruebas como funciones normales. Administrar 
dependencias de pruebas con accesorios.


#---------------------------------------------------------------
#---------------------------------------------------------------
      		    Apuntes de Desarrollo:
#---------------------------------------------------------------
#---------------------------------------------------------------


_ ORM de pyhton.py:

1. AutoField:
Django es muy similar a la columna IDENTITY en SQL. Ambos se 
utilizan para generar valores únicos y autoincrementados para 
las claves primarias de las tablas.

2. UUDI:
Campo unico y no se puede modificar y tambien mayor seguridad.
https://docs.djangoproject.com/en/5.1/ref/models/fields/

3. CACASDE:
Cuando se utiliza CASCADE, si el objeto relacionado es eliminado, 
también se eliminarán todos los objetos que dependen de él.

4. PROTECT:
Cuando se utiliza PROTECT, si el objeto relacionado es eliminado,
se producirá una excepción IntegrityError.

5. Ejemplo en models: first_name = models.CharField(max_length=50, null=True, blank=True) 
null=True y blank=True: Esto hace que estos campos sean opcionales tanto
 a nivel de base de datos (null=True) como en los formularios y validaciones
  de Django (blank=True).


5. Modelos en Django: Relaciones entre modelos.
https://cursa.app/es/pagina/modelos-en-django-relaciones-entre-modelos#:~:text=Hay%20tres%20tipos%20principales%20de,tipos%20de%20relaciones%20entre%20datos.


_ serializer.py:

1. write_only = true:
Es requerido y cuando el servidor responda con los datos del 
perfil, el campo profile_type no estará presente en la respuesta.

2. read_only = true:
En un campo de un serializer indica que el campo solo debe ser utilizado 
para lectura, es decir, para mostrar datos en las respuestas, pero no 
debe ser incluido en las solicitudes para crear o actualizar instancias.

3. blank=True: 
    Esta campo no es obligatorio en el form
4. null=True:
    Puede aver productos que no necesitan una imagen.

_ Authentication con django - token:

1. Token: 
se utiliza para generar y almacenar tokens de autenticación para los 
usuarios. Cada token es único y se asocia a un usuario específico.

2. okenAuthentication: 
se utiliza para autenticar las solicitudes basadas en tokens. Esta 
clase verifica que el token proporcionado en la solicitud es válido 
y está asociado a un usuario.

3. IsAuthenticated: 
Es un permiso que se utiliza para restringir el acceso a las vistas 
solo a usuarios autenticados. Si un usuario no está autenticado, no podrá
acceder a las vistas protegidas por este permiso.


------------------------------------------------------------------------
--  Comienzo de Docker:
------------------------------------------------------------------------
_ Requisitos:
. Docker
. Python 3.10.11

_ Estrcutura del Backend:
WEB-BACKEND_DARYZA/
|-- content/
|-- venv/
|-- core/
|   |-- authentication/
|   |-- core/
|   |   |-- __init__.py
|   |   |-- setting.py
|   |   |-- wsgi.py
|   |-- dashboard/
|   |-- gestion_almacen/
|   |-- gestion_venta/
|   |-- manage.py

|-- .env.local
|-- .env.prod
|-- .gitignore
|-- README.md
|-- requirements.txt

------------------------------------------------------------------------
--  🚀 Comandos de inicio rápido - DOCKER:
------------------------------------------------------------------------
# 1. Crear configuración
cp .env.example .env

# 2. Ejecutar con Docker
docker-compose up --build

# 3. Aplicar migraciones
docker-compose exec web python manage.py migrate

# 4. Crear superusuario
docker-compose exec web python manage.py createsuperuser

----- Ver por termina fuincionamiento:
docker ps -> puertos  docker.
docker logs daryza_backend -> ver el backend real.
----- Crear: 
docker-compose exec web python core/manage.py makemigrations  ---> no poner falla
docker-compose exec web python core/manage.py migrate
docker-compose exec web python core/manage.py createsuperuser
------------------------------------------------------------------------
_ siempre pasa:
python core/manage.py migrate
python core/manage.py migrate authentication
